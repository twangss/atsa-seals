// Generated by rstantools.  Do not edit by hand.

/*
    atsarpackage is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    atsarpackage is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with atsarpackage.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_marss_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'marss', line 24, column 2 to column 15)",
                                                      " (in 'marss', line 25, column 2 to column 43)",
                                                      " (in 'marss', line 27, column 2 to column 21)",
                                                      " (in 'marss', line 29, column 2 to column 16)",
                                                      " (in 'marss', line 30, column 2 to column 33)",
                                                      " (in 'marss', line 31, column 2 to column 36)",
                                                      " (in 'marss', line 34, column 2 to column 20)",
                                                      " (in 'marss', line 35, column 2 to column 17)",
                                                      " (in 'marss', line 38, column 2 to column 17)",
                                                      " (in 'marss', line 39, column 2 to column 17)",
                                                      " (in 'marss', line 41, column 16 to column 28)",
                                                      " (in 'marss', line 41, column 2 to column 28)",
                                                      " (in 'marss', line 42, column 18 to column 40)",
                                                      " (in 'marss', line 42, column 2 to column 40)",
                                                      " (in 'marss', line 46, column 6 to column 29)",
                                                      " (in 'marss', line 44, column 16 to line 50, column 3)",
                                                      " (in 'marss', line 44, column 2 to line 50, column 3)",
                                                      " (in 'marss', line 62, column 17 to column 32)",
                                                      " (in 'marss', line 62, column 16 to column 33)",
                                                      " (in 'marss', line 62, column 2 to column 33)",
                                                      " (in 'marss', line 67, column 4 to column 82)",
                                                      " (in 'marss', line 64, column 18 to line 71, column 5)",
                                                      " (in 'marss', line 64, column 4 to line 71, column 5)",
                                                      " (in 'marss', line 63, column 16 to line 72, column 3)",
                                                      " (in 'marss', line 63, column 2 to line 72, column 3)",
                                                      " (in 'marss', line 76, column 6 to column 43)",
                                                      " (in 'marss', line 75, column 18 to line 77, column 5)",
                                                      " (in 'marss', line 75, column 4 to line 77, column 5)",
                                                      " (in 'marss', line 74, column 16 to line 78, column 3)",
                                                      " (in 'marss', line 74, column 2 to line 78, column 3)",
                                                      " (in 'marss', line 85, column 4 to column 31)",
                                                      " (in 'marss', line 84, column 23 to line 86, column 3)",
                                                      " (in 'marss', line 84, column 2 to line 86, column 3)",
                                                      " (in 'marss', line 88, column 4 to column 35)",
                                                      " (in 'marss', line 87, column 23 to line 89, column 3)",
                                                      " (in 'marss', line 87, column 2 to line 89, column 3)",
                                                      " (in 'marss', line 92, column 6 to column 27)",
                                                      " (in 'marss', line 91, column 25 to line 93, column 5)",
                                                      " (in 'marss', line 91, column 4 to line 93, column 5)",
                                                      " (in 'marss', line 96, column 4 to column 30)",
                                                      " (in 'marss', line 95, column 16 to line 97, column 3)",
                                                      " (in 'marss', line 95, column 2 to line 97, column 3)",
                                                      " (in 'marss', line 111, column 4 to column 100)",
                                                      " (in 'marss', line 110, column 20 to line 117, column 3)",
                                                      " (in 'marss', line 110, column 2 to line 117, column 3)",
                                                      " (in 'marss', line 2, column 2 to column 17)",
                                                      " (in 'marss', line 3, column 2 to column 17)",
                                                      " (in 'marss', line 4, column 22 to column 23)",
                                                      " (in 'marss', line 4, column 2 to column 25)",
                                                      " (in 'marss', line 5, column 2 to column 17)",
                                                      " (in 'marss', line 6, column 28 to column 29)",
                                                      " (in 'marss', line 6, column 2 to column 31)",
                                                      " (in 'marss', line 7, column 2 to column 24)",
                                                      " (in 'marss', line 8, column 28 to column 31)",
                                                      " (in 'marss', line 8, column 2 to column 33)",
                                                      " (in 'marss', line 9, column 2 to column 24)",
                                                      " (in 'marss', line 10, column 22 to column 25)",
                                                      " (in 'marss', line 10, column 2 to column 27)",
                                                      " (in 'marss', line 11, column 2 to column 24)",
                                                      " (in 'marss', line 12, column 2 to column 21)",
                                                      " (in 'marss', line 13, column 28 to column 33)",
                                                      " (in 'marss', line 13, column 2 to column 35)",
                                                      " (in 'marss', line 14, column 28 to column 33)",
                                                      " (in 'marss', line 14, column 2 to column 35)",
                                                      " (in 'marss', line 17, column 2 to column 19)",
                                                      " (in 'marss', line 18, column 21 to column 26)",
                                                      " (in 'marss', line 18, column 2 to column 28)",
                                                      " (in 'marss', line 19, column 9 to column 14)",
                                                      " (in 'marss', line 19, column 2 to column 18)",
                                                      " (in 'marss', line 21, column 2 to column 13)",
                                                      " (in 'marss', line 24, column 9 to column 10)",
                                                      " (in 'marss', line 25, column 38 to column 41)",
                                                      " (in 'marss', line 25, column 27 to column 28)",
                                                      " (in 'marss', line 27, column 9 to column 17)",
                                                      " (in 'marss', line 29, column 9 to column 12)",
                                                      " (in 'marss', line 30, column 30 to column 31)",
                                                      " (in 'marss', line 31, column 26 to column 34)",
                                                      " (in 'marss', line 34, column 17 to column 18)",
                                                      " (in 'marss', line 34, column 9 to column 10)",
                                                      " (in 'marss', line 35, column 14 to column 15)",
                                                      " (in 'marss', line 35, column 9 to column 10)",
                                                      " (in 'marss', line 38, column 9 to column 10)",
                                                      " (in 'marss', line 39, column 9 to column 10)"};
#include <stan_meta_header.hpp>
class model_marss final : public model_base_crtp<model_marss> {
private:
  int N;
  int M;
  std::vector<int> states;
  int S;
  std::vector<int> obsVariances;
  int n_obsvar;
  std::vector<int> proVariances;
  int n_provar;
  std::vector<int> trends;
  int n_trends;
  int n_pos;
  std::vector<int> col_indx_pos;
  std::vector<int> row_indx_pos;
  int n_A;
  std::vector<int> est_A;
  Eigen::Matrix<double, -1, 1> y;
  int family;
  int pro_dev_1dim__;
 
public:
  ~model_marss() { }
  
  inline std::string model_name() const final { return "model_marss"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_marss(stan::io::var_context& context__,
              unsigned int random_seed__ = 0,
              std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_marss_namespace::model_marss";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 46;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 46;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 46;
      current_statement__ = 46;
      check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 47;
      context__.validate_dims("data initialization","M","int",
          context__.to_vec());
      M = std::numeric_limits<int>::min();
      
      current_statement__ = 47;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 47;
      current_statement__ = 47;
      check_greater_or_equal(function__, "M", M, 0);
      current_statement__ = 48;
      validate_non_negative_index("states", "M", M);
      current_statement__ = 49;
      context__.validate_dims("data initialization","states","int",
          context__.to_vec(M));
      states = std::vector<int>(M, std::numeric_limits<int>::min());
      
      current_statement__ = 49;
      assign(states, nil_index_list(), context__.vals_i("states"),
        "assigning variable states");
      current_statement__ = 49;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 49;
        current_statement__ = 49;
        check_greater_or_equal(function__, "states[sym1__]",
                               states[(sym1__ - 1)], 0);}
      current_statement__ = 50;
      context__.validate_dims("data initialization","S","int",
          context__.to_vec());
      S = std::numeric_limits<int>::min();
      
      current_statement__ = 50;
      S = context__.vals_i("S")[(1 - 1)];
      current_statement__ = 50;
      current_statement__ = 50;
      check_greater_or_equal(function__, "S", S, 0);
      current_statement__ = 51;
      validate_non_negative_index("obsVariances", "M", M);
      current_statement__ = 52;
      context__.validate_dims("data initialization","obsVariances","int",
          context__.to_vec(M));
      obsVariances = std::vector<int>(M, std::numeric_limits<int>::min());
      
      current_statement__ = 52;
      assign(obsVariances, nil_index_list(),
        context__.vals_i("obsVariances"), "assigning variable obsVariances");
      current_statement__ = 52;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 52;
        current_statement__ = 52;
        check_greater_or_equal(function__, "obsVariances[sym1__]",
                               obsVariances[(sym1__ - 1)], 0);}
      current_statement__ = 53;
      context__.validate_dims("data initialization","n_obsvar","int",
          context__.to_vec());
      n_obsvar = std::numeric_limits<int>::min();
      
      current_statement__ = 53;
      n_obsvar = context__.vals_i("n_obsvar")[(1 - 1)];
      current_statement__ = 53;
      current_statement__ = 53;
      check_greater_or_equal(function__, "n_obsvar", n_obsvar, 0);
      current_statement__ = 54;
      validate_non_negative_index("proVariances", "S + 1", (S + 1));
      current_statement__ = 55;
      context__.validate_dims("data initialization","proVariances","int",
          context__.to_vec((S + 1)));
      proVariances = std::vector<int>((S + 1), std::numeric_limits<int>::min());
      
      current_statement__ = 55;
      assign(proVariances, nil_index_list(),
        context__.vals_i("proVariances"), "assigning variable proVariances");
      current_statement__ = 55;
      for (int sym1__ = 1; sym1__ <= (S + 1); ++sym1__) {
        current_statement__ = 55;
        current_statement__ = 55;
        check_greater_or_equal(function__, "proVariances[sym1__]",
                               proVariances[(sym1__ - 1)], 0);}
      current_statement__ = 56;
      context__.validate_dims("data initialization","n_provar","int",
          context__.to_vec());
      n_provar = std::numeric_limits<int>::min();
      
      current_statement__ = 56;
      n_provar = context__.vals_i("n_provar")[(1 - 1)];
      current_statement__ = 56;
      current_statement__ = 56;
      check_greater_or_equal(function__, "n_provar", n_provar, 0);
      current_statement__ = 57;
      validate_non_negative_index("trends", "S + 1", (S + 1));
      current_statement__ = 58;
      context__.validate_dims("data initialization","trends","int",
          context__.to_vec((S + 1)));
      trends = std::vector<int>((S + 1), std::numeric_limits<int>::min());
      
      current_statement__ = 58;
      assign(trends, nil_index_list(), context__.vals_i("trends"),
        "assigning variable trends");
      current_statement__ = 58;
      for (int sym1__ = 1; sym1__ <= (S + 1); ++sym1__) {
        current_statement__ = 58;
        current_statement__ = 58;
        check_greater_or_equal(function__, "trends[sym1__]",
                               trends[(sym1__ - 1)], 0);}
      current_statement__ = 59;
      context__.validate_dims("data initialization","n_trends","int",
          context__.to_vec());
      n_trends = std::numeric_limits<int>::min();
      
      current_statement__ = 59;
      n_trends = context__.vals_i("n_trends")[(1 - 1)];
      current_statement__ = 59;
      current_statement__ = 59;
      check_greater_or_equal(function__, "n_trends", n_trends, 0);
      current_statement__ = 60;
      context__.validate_dims("data initialization","n_pos","int",
          context__.to_vec());
      n_pos = std::numeric_limits<int>::min();
      
      current_statement__ = 60;
      n_pos = context__.vals_i("n_pos")[(1 - 1)];
      current_statement__ = 60;
      current_statement__ = 60;
      check_greater_or_equal(function__, "n_pos", n_pos, 0);
      current_statement__ = 61;
      validate_non_negative_index("col_indx_pos", "n_pos", n_pos);
      current_statement__ = 62;
      context__.validate_dims("data initialization","col_indx_pos","int",
          context__.to_vec(n_pos));
      col_indx_pos = std::vector<int>(n_pos, std::numeric_limits<int>::min());
      
      current_statement__ = 62;
      assign(col_indx_pos, nil_index_list(),
        context__.vals_i("col_indx_pos"), "assigning variable col_indx_pos");
      current_statement__ = 62;
      for (int sym1__ = 1; sym1__ <= n_pos; ++sym1__) {
        current_statement__ = 62;
        current_statement__ = 62;
        check_greater_or_equal(function__, "col_indx_pos[sym1__]",
                               col_indx_pos[(sym1__ - 1)], 0);}
      current_statement__ = 63;
      validate_non_negative_index("row_indx_pos", "n_pos", n_pos);
      current_statement__ = 64;
      context__.validate_dims("data initialization","row_indx_pos","int",
          context__.to_vec(n_pos));
      row_indx_pos = std::vector<int>(n_pos, std::numeric_limits<int>::min());
      
      current_statement__ = 64;
      assign(row_indx_pos, nil_index_list(),
        context__.vals_i("row_indx_pos"), "assigning variable row_indx_pos");
      current_statement__ = 64;
      for (int sym1__ = 1; sym1__ <= n_pos; ++sym1__) {
        current_statement__ = 64;
        current_statement__ = 64;
        check_greater_or_equal(function__, "row_indx_pos[sym1__]",
                               row_indx_pos[(sym1__ - 1)], 0);}
      current_statement__ = 65;
      context__.validate_dims("data initialization","n_A","int",
          context__.to_vec());
      n_A = std::numeric_limits<int>::min();
      
      current_statement__ = 65;
      n_A = context__.vals_i("n_A")[(1 - 1)];
      current_statement__ = 65;
      current_statement__ = 65;
      check_greater_or_equal(function__, "n_A", n_A, 0);
      current_statement__ = 66;
      validate_non_negative_index("est_A", "n_A + 2", (n_A + 2));
      current_statement__ = 67;
      context__.validate_dims("data initialization","est_A","int",
          context__.to_vec((n_A + 2)));
      est_A = std::vector<int>((n_A + 2), std::numeric_limits<int>::min());
      
      current_statement__ = 67;
      assign(est_A, nil_index_list(), context__.vals_i("est_A"),
        "assigning variable est_A");
      current_statement__ = 67;
      for (int sym1__ = 1; sym1__ <= (n_A + 2); ++sym1__) {
        current_statement__ = 67;
        current_statement__ = 67;
        check_greater_or_equal(function__, "est_A[sym1__]",
                               est_A[(sym1__ - 1)], 0);}
      current_statement__ = 68;
      validate_non_negative_index("y", "n_pos", n_pos);
      current_statement__ = 69;
      context__.validate_dims("data initialization","y","double",
          context__.to_vec(n_pos));
      y = Eigen::Matrix<double, -1, 1>(n_pos);
      stan::math::fill(y, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 69;
        assign(y_flat__, nil_index_list(), context__.vals_r("y"),
          "assigning variable y_flat__");
        current_statement__ = 69;
        pos__ = 1;
        current_statement__ = 69;
        for (int sym1__ = 1; sym1__ <= n_pos; ++sym1__) {
          current_statement__ = 69;
          assign(y, cons_list(index_uni(sym1__), nil_index_list()),
            y_flat__[(pos__ - 1)], "assigning variable y");
          current_statement__ = 69;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 70;
      context__.validate_dims("data initialization","family","int",
          context__.to_vec());
      family = std::numeric_limits<int>::min();
      
      current_statement__ = 70;
      family = context__.vals_i("family")[(1 - 1)];
      current_statement__ = 71;
      validate_non_negative_index("x0", "S", S);
      current_statement__ = 72;
      pro_dev_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 72;
      pro_dev_1dim__ = (N - 1);
      current_statement__ = 72;
      validate_non_negative_index("pro_dev", "N - 1", pro_dev_1dim__);
      current_statement__ = 73;
      validate_non_negative_index("pro_dev", "S", S);
      current_statement__ = 74;
      validate_non_negative_index("U", "n_trends", n_trends);
      current_statement__ = 75;
      validate_non_negative_index("A", "n_A", n_A);
      current_statement__ = 76;
      validate_non_negative_index("sigma_process", "S", S);
      current_statement__ = 77;
      validate_non_negative_index("sigma_obs", "n_obsvar", n_obsvar);
      current_statement__ = 78;
      validate_non_negative_index("pred", "N", N);
      current_statement__ = 79;
      validate_non_negative_index("pred", "M", M);
      current_statement__ = 80;
      validate_non_negative_index("x", "N", N);
      current_statement__ = 81;
      validate_non_negative_index("x", "S", S);
      current_statement__ = 82;
      validate_non_negative_index("Uvec", "S", S);
      current_statement__ = 83;
      validate_non_negative_index("Avec", "M", M);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += S;
      num_params_r__ += pro_dev_1dim__ * S;
      num_params_r__ += n_trends;
      num_params_r__ += n_A;
      num_params_r__ += S;
      num_params_r__ += n_obsvar;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_marss_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> x0;
      x0 = Eigen::Matrix<local_scalar_t__, -1, 1>(S);
      stan::math::fill(x0, DUMMY_VAR__);
      
      current_statement__ = 1;
      x0 = in__.vector(S);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> pro_dev;
      pro_dev = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(pro_dev_1dim__, Eigen::Matrix<local_scalar_t__, -1, 1>(S));
      stan::math::fill(pro_dev, DUMMY_VAR__);
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= pro_dev_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(pro_dev, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(S), "assigning variable pro_dev");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= pro_dev_1dim__; ++sym1__) {
        current_statement__ = 2;
        for (int sym2__ = 1; sym2__ <= S; ++sym2__) {
          current_statement__ = 2;
          if (jacobian__) {
            current_statement__ = 2;
            assign(pro_dev,
              cons_list(index_uni(sym1__),
                cons_list(index_uni(sym2__), nil_index_list())),
              stan::math::lub_constrain(pro_dev[(sym1__ - 1)][(sym2__ - 1)],
                -3, 3, lp__), "assigning variable pro_dev");
          } else {
            current_statement__ = 2;
            assign(pro_dev,
              cons_list(index_uni(sym1__),
                cons_list(index_uni(sym2__), nil_index_list())),
              stan::math::lub_constrain(pro_dev[(sym1__ - 1)][(sym2__ - 1)],
                -3, 3), "assigning variable pro_dev");
          }}}
      Eigen::Matrix<local_scalar_t__, -1, 1> U;
      U = Eigen::Matrix<local_scalar_t__, -1, 1>(n_trends);
      stan::math::fill(U, DUMMY_VAR__);
      
      current_statement__ = 3;
      U = in__.vector(n_trends);
      Eigen::Matrix<local_scalar_t__, -1, 1> A;
      A = Eigen::Matrix<local_scalar_t__, -1, 1>(n_A);
      stan::math::fill(A, DUMMY_VAR__);
      
      current_statement__ = 4;
      A = in__.vector(n_A);
      std::vector<local_scalar_t__> sigma_process;
      sigma_process = std::vector<local_scalar_t__>(S, DUMMY_VAR__);
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        current_statement__ = 5;
        assign(sigma_process, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable sigma_process");}
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        current_statement__ = 5;
        if (jacobian__) {
          current_statement__ = 5;
          assign(sigma_process,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma_process[(sym1__ - 1)], 0, lp__),
            "assigning variable sigma_process");
        } else {
          current_statement__ = 5;
          assign(sigma_process,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma_process[(sym1__ - 1)], 0),
            "assigning variable sigma_process");
        }}
      std::vector<local_scalar_t__> sigma_obs;
      sigma_obs = std::vector<local_scalar_t__>(n_obsvar, DUMMY_VAR__);
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= n_obsvar; ++sym1__) {
        current_statement__ = 6;
        assign(sigma_obs, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable sigma_obs");}
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= n_obsvar; ++sym1__) {
        current_statement__ = 6;
        if (jacobian__) {
          current_statement__ = 6;
          assign(sigma_obs, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma_obs[(sym1__ - 1)], 0, lp__),
            "assigning variable sigma_obs");
        } else {
          current_statement__ = 6;
          assign(sigma_obs, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma_obs[(sym1__ - 1)], 0),
            "assigning variable sigma_obs");
        }}
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> pred;
      pred = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>(M));
      stan::math::fill(pred, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> x;
      x = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>(S));
      stan::math::fill(x, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> Uvec;
      Uvec = Eigen::Matrix<local_scalar_t__, -1, 1>(S);
      stan::math::fill(Uvec, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> Avec;
      Avec = Eigen::Matrix<local_scalar_t__, -1, 1>(M);
      stan::math::fill(Avec, DUMMY_VAR__);
      
      current_statement__ = 12;
      for (int i = 1; i <= M; ++i) {
        current_statement__ = 11;
        assign(Avec, cons_list(index_uni(i), nil_index_list()), 0,
          "assigning variable Avec");}
      current_statement__ = 14;
      for (int i = 1; i <= n_A; ++i) {
        current_statement__ = 13;
        assign(Avec, cons_list(index_uni(est_A[(i - 1)]), nil_index_list()),
          A[(i - 1)], "assigning variable Avec");}
      current_statement__ = 17;
      for (int i = 1; i <= S; ++i) {
        current_statement__ = 15;
        assign(Uvec, cons_list(index_uni(i), nil_index_list()),
          U[(trends[(i - 1)] - 1)], "assigning variable Uvec");}
      current_statement__ = 20;
      for (int s = 1; s <= S; ++s) {
        current_statement__ = 18;
        assign(x,
          cons_list(index_uni(1), cons_list(index_uni(s), nil_index_list())),
          x0[(s - 1)], "assigning variable x");}
      current_statement__ = 25;
      for (int t = 2; t <= N; ++t) {
        current_statement__ = 23;
        for (int s = 1; s <= S; ++s) {
          current_statement__ = 21;
          assign(x,
            cons_list(index_uni(t),
              cons_list(index_uni(s), nil_index_list())),
            ((x[((t - 1) - 1)][(s - 1)] + Uvec[(s - 1)]) +
              (pro_dev[((t - 1) - 1)][(s - 1)] *
                sigma_process[(proVariances[(s - 1)] - 1)])),
            "assigning variable x");}}
      current_statement__ = 30;
      for (int m = 1; m <= M; ++m) {
        current_statement__ = 28;
        for (int t = 1; t <= N; ++t) {
          current_statement__ = 26;
          assign(pred,
            cons_list(index_uni(t),
              cons_list(index_uni(m), nil_index_list())),
            (x[(t - 1)][(states[(m - 1)] - 1)] + Avec[(m - 1)]),
            "assigning variable pred");}}
      {
        current_statement__ = 33;
        for (int i = 1; i <= n_obsvar; ++i) {
          current_statement__ = 31;
          lp_accum__.add(normal_lpdf<propto__>(sigma_obs[(i - 1)], 0, 1));}
        current_statement__ = 36;
        for (int s = 1; s <= n_provar; ++s) {
          current_statement__ = 34;
          lp_accum__.add(normal_lpdf<propto__>(sigma_process[(s - 1)], 0, 1));
        }
        current_statement__ = 39;
        for (int i = 1; i <= n_trends; ++i) {
          current_statement__ = 37;
          lp_accum__.add(normal_lpdf<propto__>(U[(i - 1)], 0, 0.1));}
        current_statement__ = 42;
        for (int s = 1; s <= S; ++s) {
          current_statement__ = 40;
          lp_accum__.add(normal_lpdf<propto__>(pro_dev[(s - 1)], 0, 1));}
        current_statement__ = 45;
        for (int i = 1; i <= n_pos; ++i) {
          current_statement__ = 43;
          lp_accum__.add(
            normal_lpdf<propto__>(y[(i - 1)],
              pred[(col_indx_pos[(i - 1)] - 1)][(row_indx_pos[(i - 1)] - 1)],
              sigma_obs[(obsVariances[(row_indx_pos[(i - 1)] - 1)] - 1)]));}
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_marss_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> x0;
      x0 = Eigen::Matrix<double, -1, 1>(S);
      stan::math::fill(x0, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      x0 = in__.vector(S);
      std::vector<Eigen::Matrix<double, -1, 1>> pro_dev;
      pro_dev = std::vector<Eigen::Matrix<double, -1, 1>>(pro_dev_1dim__, Eigen::Matrix<double, -1, 1>(S));
      stan::math::fill(pro_dev, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= pro_dev_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(pro_dev, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(S), "assigning variable pro_dev");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= pro_dev_1dim__; ++sym1__) {
        current_statement__ = 2;
        for (int sym2__ = 1; sym2__ <= S; ++sym2__) {
          current_statement__ = 2;
          assign(pro_dev,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())),
            stan::math::lub_constrain(pro_dev[(sym1__ - 1)][(sym2__ - 1)],
              -3, 3), "assigning variable pro_dev");}}
      Eigen::Matrix<double, -1, 1> U;
      U = Eigen::Matrix<double, -1, 1>(n_trends);
      stan::math::fill(U, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      U = in__.vector(n_trends);
      Eigen::Matrix<double, -1, 1> A;
      A = Eigen::Matrix<double, -1, 1>(n_A);
      stan::math::fill(A, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      A = in__.vector(n_A);
      std::vector<double> sigma_process;
      sigma_process = std::vector<double>(S, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        current_statement__ = 5;
        assign(sigma_process, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable sigma_process");}
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        current_statement__ = 5;
        assign(sigma_process, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(sigma_process[(sym1__ - 1)], 0),
          "assigning variable sigma_process");}
      std::vector<double> sigma_obs;
      sigma_obs = std::vector<double>(n_obsvar, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= n_obsvar; ++sym1__) {
        current_statement__ = 6;
        assign(sigma_obs, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable sigma_obs");}
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= n_obsvar; ++sym1__) {
        current_statement__ = 6;
        assign(sigma_obs, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(sigma_obs[(sym1__ - 1)], 0),
          "assigning variable sigma_obs");}
      std::vector<Eigen::Matrix<double, -1, 1>> pred;
      pred = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(M));
      stan::math::fill(pred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, 1>> x;
      x = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(S));
      stan::math::fill(x, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> Uvec;
      Uvec = Eigen::Matrix<double, -1, 1>(S);
      stan::math::fill(Uvec, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> Avec;
      Avec = Eigen::Matrix<double, -1, 1>(M);
      stan::math::fill(Avec, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        vars__.emplace_back(x0[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= pro_dev_1dim__; ++sym2__) {
          vars__.emplace_back(pro_dev[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= n_trends; ++sym1__) {
        vars__.emplace_back(U[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_A; ++sym1__) {
        vars__.emplace_back(A[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        vars__.emplace_back(sigma_process[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_obsvar; ++sym1__) {
        vars__.emplace_back(sigma_obs[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 12;
      for (int i = 1; i <= M; ++i) {
        current_statement__ = 11;
        assign(Avec, cons_list(index_uni(i), nil_index_list()), 0,
          "assigning variable Avec");}
      current_statement__ = 14;
      for (int i = 1; i <= n_A; ++i) {
        current_statement__ = 13;
        assign(Avec, cons_list(index_uni(est_A[(i - 1)]), nil_index_list()),
          A[(i - 1)], "assigning variable Avec");}
      current_statement__ = 17;
      for (int i = 1; i <= S; ++i) {
        current_statement__ = 15;
        assign(Uvec, cons_list(index_uni(i), nil_index_list()),
          U[(trends[(i - 1)] - 1)], "assigning variable Uvec");}
      current_statement__ = 20;
      for (int s = 1; s <= S; ++s) {
        current_statement__ = 18;
        assign(x,
          cons_list(index_uni(1), cons_list(index_uni(s), nil_index_list())),
          x0[(s - 1)], "assigning variable x");}
      current_statement__ = 25;
      for (int t = 2; t <= N; ++t) {
        current_statement__ = 23;
        for (int s = 1; s <= S; ++s) {
          current_statement__ = 21;
          assign(x,
            cons_list(index_uni(t),
              cons_list(index_uni(s), nil_index_list())),
            ((x[((t - 1) - 1)][(s - 1)] + Uvec[(s - 1)]) +
              (pro_dev[((t - 1) - 1)][(s - 1)] *
                sigma_process[(proVariances[(s - 1)] - 1)])),
            "assigning variable x");}}
      current_statement__ = 30;
      for (int m = 1; m <= M; ++m) {
        current_statement__ = 28;
        for (int t = 1; t <= N; ++t) {
          current_statement__ = 26;
          assign(pred,
            cons_list(index_uni(t),
              cons_list(index_uni(m), nil_index_list())),
            (x[(t - 1)][(states[(m - 1)] - 1)] + Avec[(m - 1)]),
            "assigning variable pred");}}
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            vars__.emplace_back(pred[(sym2__ - 1)][(sym1__ - 1)]);}}
        for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            vars__.emplace_back(x[(sym2__ - 1)][(sym1__ - 1)]);}}
        for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
          vars__.emplace_back(Uvec[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          vars__.emplace_back(Avec[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> x0;
      x0 = Eigen::Matrix<double, -1, 1>(S);
      stan::math::fill(x0, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> x0_flat__;
        current_statement__ = 1;
        assign(x0_flat__, nil_index_list(), context__.vals_r("x0"),
          "assigning variable x0_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
          current_statement__ = 1;
          assign(x0, cons_list(index_uni(sym1__), nil_index_list()),
            x0_flat__[(pos__ - 1)], "assigning variable x0");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      std::vector<Eigen::Matrix<double, -1, 1>> pro_dev;
      pro_dev = std::vector<Eigen::Matrix<double, -1, 1>>(pro_dev_1dim__, Eigen::Matrix<double, -1, 1>(S));
      stan::math::fill(pro_dev, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> pro_dev_flat__;
        current_statement__ = 2;
        assign(pro_dev_flat__, nil_index_list(), context__.vals_r("pro_dev"),
          "assigning variable pro_dev_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
          current_statement__ = 2;
          for (int sym2__ = 1; sym2__ <= pro_dev_1dim__; ++sym2__) {
            current_statement__ = 2;
            assign(pro_dev,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              pro_dev_flat__[(pos__ - 1)], "assigning variable pro_dev");
            current_statement__ = 2;
            pos__ = (pos__ + 1);}}
      }
      std::vector<Eigen::Matrix<double, -1, 1>> pro_dev_free__;
      pro_dev_free__ = std::vector<Eigen::Matrix<double, -1, 1>>(pro_dev_1dim__, Eigen::Matrix<double, -1, 1>(S));
      stan::math::fill(pro_dev_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= pro_dev_1dim__; ++sym1__) {
        current_statement__ = 2;
        for (int sym2__ = 1; sym2__ <= S; ++sym2__) {
          current_statement__ = 2;
          assign(pro_dev_free__,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())),
            stan::math::lub_free(pro_dev[(sym1__ - 1)][(sym2__ - 1)], -3, 3),
            "assigning variable pro_dev_free__");}}
      Eigen::Matrix<double, -1, 1> U;
      U = Eigen::Matrix<double, -1, 1>(n_trends);
      stan::math::fill(U, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> U_flat__;
        current_statement__ = 3;
        assign(U_flat__, nil_index_list(), context__.vals_r("U"),
          "assigning variable U_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= n_trends; ++sym1__) {
          current_statement__ = 3;
          assign(U, cons_list(index_uni(sym1__), nil_index_list()),
            U_flat__[(pos__ - 1)], "assigning variable U");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> A;
      A = Eigen::Matrix<double, -1, 1>(n_A);
      stan::math::fill(A, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> A_flat__;
        current_statement__ = 4;
        assign(A_flat__, nil_index_list(), context__.vals_r("A"),
          "assigning variable A_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= n_A; ++sym1__) {
          current_statement__ = 4;
          assign(A, cons_list(index_uni(sym1__), nil_index_list()),
            A_flat__[(pos__ - 1)], "assigning variable A");
          current_statement__ = 4;
          pos__ = (pos__ + 1);}
      }
      std::vector<double> sigma_process;
      sigma_process = std::vector<double>(S, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      assign(sigma_process, nil_index_list(),
        context__.vals_r("sigma_process"), "assigning variable sigma_process");
      std::vector<double> sigma_process_free__;
      sigma_process_free__ = std::vector<double>(S, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        current_statement__ = 5;
        assign(sigma_process_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(sigma_process[(sym1__ - 1)], 0),
          "assigning variable sigma_process_free__");}
      std::vector<double> sigma_obs;
      sigma_obs = std::vector<double>(n_obsvar, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      assign(sigma_obs, nil_index_list(), context__.vals_r("sigma_obs"),
        "assigning variable sigma_obs");
      std::vector<double> sigma_obs_free__;
      sigma_obs_free__ = std::vector<double>(n_obsvar, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= n_obsvar; ++sym1__) {
        current_statement__ = 6;
        assign(sigma_obs_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(sigma_obs[(sym1__ - 1)], 0),
          "assigning variable sigma_obs_free__");}
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        vars__.emplace_back(x0[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= pro_dev_1dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= S; ++sym2__) {
          vars__.emplace_back(pro_dev_free__[(sym1__ - 1)][(sym2__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= n_trends; ++sym1__) {
        vars__.emplace_back(U[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_A; ++sym1__) {
        vars__.emplace_back(A[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        vars__.emplace_back(sigma_process_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_obsvar; ++sym1__) {
        vars__.emplace_back(sigma_obs_free__[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("x0");
    names__.emplace_back("pro_dev");
    names__.emplace_back("U");
    names__.emplace_back("A");
    names__.emplace_back("sigma_process");
    names__.emplace_back("sigma_obs");
    names__.emplace_back("pred");
    names__.emplace_back("x");
    names__.emplace_back("Uvec");
    names__.emplace_back("Avec");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(S)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(pro_dev_1dim__)
                                             , static_cast<size_t>(S)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_trends)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_A)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(S)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_obsvar)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(M)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(S)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(S)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "x0" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= pro_dev_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "pro_dev" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= n_trends; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "U" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_A; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "A" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_process" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_obsvar; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_obs" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pred" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "x" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Uvec" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Avec" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "x0" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= pro_dev_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "pro_dev" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= n_trends; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "U" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_A; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "A" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_process" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_obsvar; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_obs" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pred" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "x" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Uvec" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Avec" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"x0\",\"type\":{\"name\":\"vector\",\"length\":" << S << "},\"block\":\"parameters\"},{\"name\":\"pro_dev\",\"type\":{\"name\":\"array\",\"length\":" << pro_dev_1dim__ << ",\"element_type\":{\"name\":\"vector\",\"length\":" << S << "}},\"block\":\"parameters\"},{\"name\":\"U\",\"type\":{\"name\":\"vector\",\"length\":" << n_trends << "},\"block\":\"parameters\"},{\"name\":\"A\",\"type\":{\"name\":\"vector\",\"length\":" << n_A << "},\"block\":\"parameters\"},{\"name\":\"sigma_process\",\"type\":{\"name\":\"array\",\"length\":" << S << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma_obs\",\"type\":{\"name\":\"array\",\"length\":" << n_obsvar << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"pred\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << M << "}},\"block\":\"transformed_parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << S << "}},\"block\":\"transformed_parameters\"},{\"name\":\"Uvec\",\"type\":{\"name\":\"vector\",\"length\":" << S << "},\"block\":\"transformed_parameters\"},{\"name\":\"Avec\",\"type\":{\"name\":\"vector\",\"length\":" << M << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"x0\",\"type\":{\"name\":\"vector\",\"length\":" << S << "},\"block\":\"parameters\"},{\"name\":\"pro_dev\",\"type\":{\"name\":\"array\",\"length\":" << pro_dev_1dim__ << ",\"element_type\":{\"name\":\"vector\",\"length\":" << S << "}},\"block\":\"parameters\"},{\"name\":\"U\",\"type\":{\"name\":\"vector\",\"length\":" << n_trends << "},\"block\":\"parameters\"},{\"name\":\"A\",\"type\":{\"name\":\"vector\",\"length\":" << n_A << "},\"block\":\"parameters\"},{\"name\":\"sigma_process\",\"type\":{\"name\":\"array\",\"length\":" << S << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma_obs\",\"type\":{\"name\":\"array\",\"length\":" << n_obsvar << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"pred\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << M << "}},\"block\":\"transformed_parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << S << "}},\"block\":\"transformed_parameters\"},{\"name\":\"Uvec\",\"type\":{\"name\":\"vector\",\"length\":" << S << "},\"block\":\"transformed_parameters\"},{\"name\":\"Avec\",\"type\":{\"name\":\"vector\",\"length\":" << M << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_marss_namespace::model_marss;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_marss_namespace::profiles__;
}
#endif
#endif
